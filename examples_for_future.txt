//mongodb run command
db.run_command(doc! {"ping": 1}, None).await?;
let filter = doc! { "author": "George Orwell" };
let find_options = FindOptions::builder().sort(doc! { "title": 1 }).build();
//mongodb run command

//treadpool example
 use std::sync::mpsc::channel;
 use std::time::Instant;
 use threadpool::ThreadPool;

 fn main() {
     let since_fetch = Instant::now();
     let n_workers = 4;
     let n_jobs = 8000;
     let pool = ThreadPool::new(n_workers);

     let (tx, rx) = channel();
     for _ in 0..n_jobs {
         let tx = tx.clone();
         pool.execute(move || {
             println!("aaa");
             tx.send(1)
                 .expect("channel will be there waiting for the pool");
         });
     }

     assert_eq!(rx.iter().take(n_jobs).fold(0, |a, b| a + b), 8000);
     println!(
         "in {} sec {} mill",
         since_fetch.elapsed().as_secs(),
         since_fetch.elapsed().as_millis()
     );
 }
//treadpool example

//logger example
use log::LevelFilter;
use simplelog::{Config, TermLogger, TerminalMode};
TermLogger::init(LevelFilter::Trace, Config::default(), TerminalMode::Stdout).unwrap();
//logger example

//async tokio chat server example
https://youtu.be/4DqP57BHaXI
//async tokio chat server example
