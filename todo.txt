заоверрайдить принты под цвет
тесты написать 
в хешмап с линками стоит ли засовывать переменую линка сайта?
чекать каждую ссылку на статус мало ли переименуют еще
подгружать инфу для авторизации из файла
записывать результат фетчинга в файл и проверять нет ли там таких постов
мапер который будет приравнивать все классы сайтов к одному формату
remove eprints and put print_error_red instead
---------
// расписать случай если не найдет посты
                match dots_unfiltered_str.find("</item>") {
---------
rename arxiv fetch to arxiv part
---
items: vec![BiorxivPageStructItem::new(); 30],
whats strange what only 30...weird
-------
arxiv_fetch_and_parse_xml and others cut to 2 different functions
------
rename some local variables in functions
------
add warnings prints
------
add green prints
------
service for date/time checking and executing arxiv for example one time per week and check of server restarted in this timestamp
-----
make parallel parsing
-----
"editor.formatOnSave": true, in settings.json :slight_smile: or per language: "[rust]": { "editor.formatOnSave": true, },
-------
делать хеш от поста и отправлять хеши постов с клиента на сервер чтобы сервер видел отправлял ли уже эти посты или нет
--------------
если спарсилось неудочно и возникла ошибка вместо того чтобы убивать тред просто выкинуть эррор(записать его куда нидь) и 
перейти на следующую итерацию
----------------------
в reach_provider вместо полного запроса на тело изменить ток на запрос статуса типо пинга
---------
запихнуть в enum тест\статус код
-----------
проблема еще в том что он дожидается фетча ввсех ссылок. не над так
----------------------
добавить возможность писать принты\ошибки в файл
----------
организация перезапуска фетча ссылок только для тех которые вернули эррор
----------
you need to ensure that the Arc has exactly one strong reference and the Mutex is not poisoned
-------
Rc<RefCell<Vec<T>>>
-------
Xml::CharacterNode(ref msg) => {}
                                            Xml::CDATANode(ref msg) => {
                                                println!("3");
                                            }
                                            Xml::CommentNode(ref msg) => {
                                                println!("2");
                                            }
                                            Xml::PINode(ref msg) => {
                                                println!("1");
                                            }